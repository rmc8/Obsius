/**
 * Internationalization system for Obsius plugin
 * Supports English (default) and Japanese
 */

import { SupportedLanguage, TranslationKeys } from './types';

// English translations (default)
const en: TranslationKeys = {
  cli: {
    welcome: '‚úª Welcome to Obsius v0.1.0!',
    welcomeVault: 'Vault: {vaultName}',
    welcomeHelp: 'Type /help for commands or start chatting.',
    prompt: '$ ',
    thinking: 'ü§î Thinking...',
    placeholder: 'obsius ({providerName})'
  },
  
  commands: {
    help: {
      name: 'help',
      description: 'Show commands',
      usage: 'Commands:',
      availableCommands: 'Available commands: {commands}',
      chatInstructions: 'Type any message to chat with AI.'
    },
    clear: {
      name: 'clear',
      description: 'Clear terminal'
    },
    provider: {
      name: 'provider',
      description: 'Show providers',
      available: 'Available providers:',
      status: 'Status: {status}',
      model: 'Model: {model}',
      lastVerified: 'Last verified: {date}',
      notFound: "Provider '{providerId}' not found"
    },
    settings: {
      name: 'settings',
      description: 'Open settings',
      opened: 'Settings opened'
    },
    status: {
      name: 'status',
      description: 'Show status',
      systemStatus: 'System Status:',
      currentProvider: 'Current provider: {provider}',
      authentication: 'Authentication: {status}',
      commandHistory: 'Command history: {count} entries',
      toolsAvailable: 'Tools available: {count}'
    },
    unknown: {
      error: 'Unknown command: {command}',
      suggestion: 'Type /help for available commands'
    }
  },
  
  provider: {
    connected: '‚úÖ Connected',
    notConnected: '‚ùå Not connected',
    none: 'None',
    noAuthenticated: 'Error: No authenticated AI provider available',
    checkStatus: 'Use /provider to check provider status or /settings to configure',
    configure: 'Configure API key in settings'
  },

  errors: {
    authentication: {
      invalid: 'Authentication failed. Please check your API key in settings.'
    },
    rateLimit: {
      exceeded: 'Rate limit exceeded. Please wait a moment and try again.'
    },
    network: {
      connection: 'Network connection error. Please check your internet connection.'
    },
    model: {
      unavailable: 'The selected AI model is currently unavailable. Try a different model.'
    },
    provider: {
      notConfigured: 'AI provider not configured. Please set up authentication in settings.'
    },
    unknown: {
      general: 'An unexpected error occurred. Please try again.'
    },
    tool: {
      permission: 'Permission denied for tool: {tool}',
      fileAccess: 'File access error in tool: {tool}',
      validation: 'Invalid parameters for tool: {tool}',
      execution: 'Tool {tool} failed: {error}',
      unknown: 'Unknown error in tool: {tool}'
    }
  },
  
  tools: {
    aiIntegration: 'AI integration is active and ready.',
    placeholder: 'AI agent is ready to help with your Obsidian vault!',
    comingSoon: 'üîÑ AI integration is now available'
  },
  
  settings: {
    language: 'Language',
    languageDescription: 'Select interface language',
    english: 'English',
    japanese: 'Êó•Êú¨Ë™û',
    
    // Settings sections
    interfaceSettings: 'Interface Settings',
    providerSettings: 'AI Provider Settings',
    toolSettings: 'Tool Settings',
    workflowSettings: 'Workflow Settings',
    
    // Language settings
    interfaceLanguage: 'Interface Language',
    interfaceLanguageDesc: 'Select language for UI elements (menus, settings, etc.)',
    chatLanguage: 'Chat Language',
    chatLanguageDesc: 'Language for AI responses (auto = detect from user input)',
    autoDetect: 'Auto-detect',
    
    // UI settings
    showTimestamps: 'Show Timestamps',
    showTimestampsDesc: 'Show timestamps in chat messages',
    enableStreaming: 'Enable Streaming',
    enableStreamingDesc: 'Stream AI responses in real-time',
    autoScroll: 'Auto Scroll',
    autoScrollDesc: 'Automatically scroll to latest messages',
    
    // Tool settings
    enabledTools: 'Enabled Tools',
    enabledToolsDesc: 'Select which tools the AI can use',
    confirmationRequired: 'Confirmation Required',
    confirmationRequiredDesc: 'Tools that require user confirmation before execution',
    
    // Workflow settings
    maxIterations: 'Max Iterations',
    maxIterationsDesc: 'Maximum workflow iterations (1-100)',
    enableReACT: 'Enable ReACT',
    enableReACTDesc: 'Enable ReACT reasoning methodology',
    enableStateGraph: 'Enable State Graph',
    enableStateGraphDesc: 'Enable LangGraph-style workflow',
    iterationTimeout: 'Iteration Timeout',
    iterationTimeoutDesc: 'Timeout per iteration in seconds (10-300)',
    
    // Provider settings
    defaultProvider: 'Default Provider',
    defaultProviderDesc: 'Select the default AI provider for chat interactions',
    
    // Page titles
    settingsTitle: 'Obsius AI Agent Settings',
    
    // Provider configuration
    providerStatus: 'Provider Status',
    apiKeyConfiguration: 'API Key Configuration',
    connected: 'Connected',
    notConfigured: 'Not configured',
    verificationFailed: 'Verification failed',
    apiKeyStored: 'API key stored but not verified',
    noApiKey: 'No API key configured',
    unknown: 'Unknown',
    
    // Workflow settings
    enableStateGraphWorkflow: 'Enable StateGraph Workflow',
    enableStateGraphWorkflowDesc: 'Enable LangGraph-style state management',
    workflowTip: 'Tip: For simple tasks like creating notes or searching, use 5-10 iterations. For complex analysis or multi-step operations, use 20-50 iterations.',
    resetToDefault: 'Reset to default (24)',
    
    // Provider API key descriptions
    openaiApiKeyDesc: 'Get your API key from https://platform.openai.com/api-keys',
    anthropicApiKeyDesc: 'Get your API key from https://console.anthropic.com/',
    googleApiKeyDesc: 'Get your API key from https://ai.google.dev/',
    defaultApiKeyDesc: 'Enter your API key for this provider',
    
    // Provider placeholders
    enterApiKey: 'Enter API key...',
    
    // Model selection and connection
    model: 'Model',
    modelDesc: 'Select the model to use for this provider',
    connection: 'Connection',
    connectionDesc: 'Disconnect and remove API key from secure storage',
    disconnect: 'Disconnect',
    connect: 'Connect',
    
    // Tool status
    toolsStatus: '{enabled} tools enabled, {disabled} disabled',
    
    // Error messages
    disconnectFailed: 'Failed to disconnect {provider}',
    unknownError: 'Unknown error'
  },
  
  general: {
    error: 'Error',
    success: 'Success',
    info: 'Info',
    loading: 'Loading...',
    cancel: 'Cancel',
    confirm: 'Confirm',
    yes: 'Yes',
    no: 'No'
  },

  // System Prompts
  systemPrompt: {
    intro: 'I am Obsius, your AI knowledge management agent for Obsidian. I specialize in building organized, interconnected knowledge graphs while maintaining clarity and efficiency. I use ReACT (Reasoning + Acting) methodology for complex tasks.',
    
    // ReACT Methodology section
    reactMethodology: '## ReACT Methodology (Reasoning + Acting)',
    reactExplanation: 'I follow a structured thinking process: **Thought** ‚Üí **Action** ‚Üí **Observation** ‚Üí repeat until task completion.',
    reactSteps: {
      thought: '**Thought**: I analyze the situation and plan my next step',
      action: '**Action**: I execute specific tools to gather information or make changes',
      observation: '**Observation**: I examine the results and determine if more work is needed'
    },
    reactInstructions: 'I will explicitly show my reasoning process. For complex tasks, I break them into smaller steps and execute them iteratively.',
    reactExample: '**Example ReACT Process:**\nThought: I need to create a note about AI, but first let me check what AI-related content already exists.\nAction: search_notes with query "artificial intelligence"\nObservation: Found 3 AI notes - need to review them before creating new content.\nThought: Let me read the existing content to understand the current knowledge structure.\nAction: read_note for each relevant file...',
    
    coreValues: '## Core Values',
    contextFirst: '**üîç Context First**: Always search existing knowledge before creating new content',
    smartConnections: '**üîó Smart Connections**: Create meaningful links and prevent knowledge silos',
    noDuplication: '**üö´ No Duplication**: Enhance existing notes rather than create redundant ones',
    respectStructure: '**üèóÔ∏è Respect Structure**: Follow your established organizational patterns',
    enhanceDiscovery: '**üéØ Enhance Discovery**: Ensure knowledge remains findable over time',
    workflow: '## Workflow: Explore ‚Üí Connect ‚Üí Structure ‚Üí Create ‚Üí Integrate',
    workflowSteps: {
      explore: '**üîç Explore**: Search vault for related content and patterns',
      connect: '**üîó Connect**: Map relationships to existing notes and concepts',
      structure: '**üèóÔ∏è Structure**: Plan optimal organization within your system',
      create: '**‚úèÔ∏è Create**: Execute with clear structure and strategic linking',
      integrate: '**üåê Integrate**: Verify links and ensure vault coherence'
    },
    environment: '## Environment',
    responseRules: '## Response Rules (CRITICAL)',
    responseGuidelines: '**‚â§3 lines per response** - CLI interface requires brevity\n- **Action-oriented**: Lead with what you\'re doing\n- **Visual status**: Use üîçüîó‚úÖ emojis for progress\n- **Results summary**: Show connections made and files affected\n- **No verbose explanations** - let actions speak\n- **Show reasoning**: For complex tasks, briefly explain your thought process',
    examples: '## Examples',
    exampleProductivity: {
      user: 'Create a note about productivity',
      assistant: 'üîç Searching existing productivity content...\n‚Üí Found: Time Management.md, Focus Techniques.md\n‚úÖ Created "Productivity Systems.md" with 3 connections | Tags: #productivity #systems'
    },
    exampleOrganize: {
      user: 'Organize my scattered ML notes',
      assistant: 'üîç Found 8 ML notes across vault\n‚úÖ Created ML MOC + reorganized into /AI/MachineLearning/ | 12 new connections'
    },
    exampleReact: {
      user: 'Help me research and create a comprehensive note about quantum computing',
      assistant: 'Thought: Complex topic - need to check existing quantum content first\nüîç Searching quantum-related notes...\n‚Üí Found: Physics Basics.md, Computing History.md\nNext: Reading existing content to plan comprehensive structure'
    },
    remember: 'Remember: Be concise, visual, and action-focused. Quality connections over quantity explanations. Show your reasoning for complex tasks.',
    languageInstruction: 'CRITICAL: Always respond in {language}. All responses, explanations, and content must be in {language}.'
  }
};

// Japanese translations
const ja: TranslationKeys = {
  cli: {
    welcome: '‚úª Obsius v0.1.0 „Å∏„Çà„ÅÜ„Åì„ÅùÔºÅ',
    welcomeVault: '‰øùÁÆ°Â∫´: {vaultName}',
    welcomeHelp: '„Ç≥„Éû„É≥„Éâ„ÅØ /help „ÅßÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ„ÅäÊ∞óËªΩ„Å´„ÉÅ„É£„ÉÉ„Éà„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    prompt: '$ ',
    thinking: 'ü§î ÊÄùËÄÉ‰∏≠...',
    placeholder: 'obsius ({providerName})'
  },
  
  commands: {
    help: {
      name: 'help',
      description: '„Ç≥„Éû„É≥„ÉâË°®Á§∫',
      usage: '„Ç≥„Éû„É≥„Éâ:',
      availableCommands: 'Âà©Áî®ÂèØËÉΩ„Å™„Ç≥„Éû„É≥„Éâ: {commands}',
      chatInstructions: 'AI„Å®„ÉÅ„É£„ÉÉ„Éà„Åô„Çã„Å´„ÅØ‰Ωï„Åß„ÇÇ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
    },
    clear: {
      name: 'clear',
      description: 'ÁîªÈù¢„ÇØ„É™„Ç¢'
    },
    provider: {
      name: 'provider',
      description: '„Éó„É≠„Éê„Ç§„ÉÄË°®Á§∫',
      available: 'Âà©Áî®ÂèØËÉΩ„Å™„Éó„É≠„Éê„Ç§„ÉÄ:',
      status: '„Çπ„ÉÜ„Éº„Çø„Çπ: {status}',
      model: '„É¢„Éá„É´: {model}',
      lastVerified: 'ÊúÄÁµÇÁ¢∫Ë™ç: {date}',
      notFound: "„Éó„É≠„Éê„Ç§„ÉÄ '{providerId}' „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
    },
    settings: {
      name: 'settings',
      description: 'Ë®≠ÂÆö„ÇíÈñã„Åè',
      opened: 'Ë®≠ÂÆö„ÇíÈñã„Åç„Åæ„Åó„Åü'
    },
    status: {
      name: 'status',
      description: '„Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫',
      systemStatus: '„Ç∑„Çπ„ÉÜ„É†„Çπ„ÉÜ„Éº„Çø„Çπ:',
      currentProvider: 'ÁèæÂú®„ÅÆ„Éó„É≠„Éê„Ç§„ÉÄ: {provider}',
      authentication: 'Ë™çË®º: {status}',
      commandHistory: '„Ç≥„Éû„É≥„ÉâÂ±•Ê≠¥: {count} ‰ª∂',
      toolsAvailable: 'Âà©Áî®ÂèØËÉΩ„Å™Ê©üËÉΩ: {count} ÂÄã'
    },
    unknown: {
      error: '‰∏çÊòé„Å™„Ç≥„Éû„É≥„Éâ: {command}',
      suggestion: 'Âà©Áî®ÂèØËÉΩ„Å™„Ç≥„Éû„É≥„Éâ„ÅØ /help „ÅßÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
    }
  },
  
  provider: {
    connected: '‚úÖ Êé•Á∂öÊ∏à„Åø',
    notConnected: '‚ùå Êú™Êé•Á∂ö',
    none: '„Å™„Åó',
    noAuthenticated: '„Ç®„É©„Éº: Ë™çË®ºÊ∏à„Åø„ÅÆAI„Éó„É≠„Éê„Ç§„ÉÄ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì',
    checkStatus: '/provider „Åß„Éó„É≠„Éê„Ç§„ÉÄ„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÁ¢∫Ë™ç„Åô„Çã„Åã„ÄÅ/settings „ÅßË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
    configure: 'Ë®≠ÂÆö„ÅßAPI„Ç≠„Éº„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
  },

  errors: {
    authentication: {
      invalid: 'Ë™çË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇË®≠ÂÆö„ÅßAPI„Ç≠„Éº„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
    },
    rateLimit: {
      exceeded: '„É¨„Éº„ÉàÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
    },
    network: {
      connection: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„Ç®„É©„Éº„Åß„Åô„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
    },
    model: {
      unavailable: 'ÈÅ∏Êäû„Åï„Çå„ÅüAI„É¢„Éá„É´„ÅØÁèæÂú®Âà©Áî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇÂà•„ÅÆ„É¢„Éá„É´„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ'
    },
    provider: {
      notConfigured: 'AI„Éó„É≠„Éê„Ç§„ÉÄ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇË®≠ÂÆö„ÅßË™çË®º„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
    },
    unknown: {
      general: '‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
    },
    tool: {
      permission: '„ÉÑ„Éº„É´ {tool} „ÅÆÂÆüË°åÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì',
      fileAccess: '„ÉÑ„Éº„É´ {tool} „Åß„Éï„Ç°„Ç§„É´„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
      validation: '„ÉÑ„Éº„É´ {tool} „ÅÆ„Éë„É©„É°„Éº„Çø„ÅåÁÑ°Âäπ„Åß„Åô',
      execution: '„ÉÑ„Éº„É´ {tool} „ÅÆÂÆüË°å„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {error}',
      unknown: '„ÉÑ„Éº„É´ {tool} „Åß‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'
    }
  },
  
  tools: {
    aiIntegration: 'AIÁµ±ÂêàÊ©üËÉΩ„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„ÅßÊ∫ñÂÇôÂÆå‰∫Ü„Åß„Åô„ÄÇ',
    placeholder: 'AI„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅåObsidian‰øùÁÆ°Â∫´„ÅÆ„Çµ„Éù„Éº„ÉàÊ∫ñÂÇôÂÆå‰∫Ü„Åß„ÅôÔºÅ',
    comingSoon: 'üîÑ AIÁµ±ÂêàÊ©üËÉΩ„ÅåÂà©Áî®ÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åó„Åü'
  },
  
  settings: {
    language: 'Ë®ÄË™û',
    languageDescription: '„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπË®ÄË™û„ÇíÈÅ∏Êäû',
    english: 'English',
    japanese: 'Êó•Êú¨Ë™û',
    
    // Settings sections
    interfaceSettings: '„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπË®≠ÂÆö',
    providerSettings: 'AI„Éó„É≠„Éê„Ç§„ÉÄË®≠ÂÆö',
    toolSettings: '„ÉÑ„Éº„É´Ë®≠ÂÆö',
    workflowSettings: '„ÉØ„Éº„ÇØ„Éï„É≠„ÉºË®≠ÂÆö',
    
    // Language settings
    interfaceLanguage: '„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπË®ÄË™û',
    interfaceLanguageDesc: 'UIË¶ÅÁ¥†Ôºà„É°„Éã„É•„Éº„ÄÅË®≠ÂÆö„Å™„Å©Ôºâ„ÅÆË®ÄË™û„ÇíÈÅ∏Êäû',
    chatLanguage: '„ÉÅ„É£„ÉÉ„ÉàË®ÄË™û',
    chatLanguageDesc: 'AIÂøúÁ≠î„ÅÆË®ÄË™ûÔºàËá™Âãï=„É¶„Éº„Ç∂„ÉºÂÖ•Âäõ„Åã„ÇâÊ§úÂá∫Ôºâ',
    autoDetect: 'Ëá™ÂãïÊ§úÂá∫',
    
    // UI settings
    showTimestamps: '„Çø„Ç§„É†„Çπ„Çø„É≥„ÉóË°®Á§∫',
    showTimestampsDesc: '„ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Å´„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÇíË°®Á§∫',
    enableStreaming: '„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞ÊúâÂäπ',
    enableStreamingDesc: 'AIÂøúÁ≠î„Çí„É™„Ç¢„É´„Çø„Ç§„É†„Åß„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞',
    autoScroll: 'Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´',
    autoScrollDesc: 'ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏„Åæ„ÅßËá™ÂãïÁöÑ„Å´„Çπ„ÇØ„É≠„Éº„É´',
    
    // Tool settings
    enabledTools: 'ÊúâÂäπ„Å™„ÉÑ„Éº„É´',
    enabledToolsDesc: 'AI„Åå‰ΩøÁî®„Åß„Åç„Çã„ÉÑ„Éº„É´„ÇíÈÅ∏Êäû',
    confirmationRequired: 'Á¢∫Ë™ç„ÅåÂøÖË¶Å',
    confirmationRequiredDesc: 'ÂÆüË°åÂâç„Å´„É¶„Éº„Ç∂„ÉºÁ¢∫Ë™ç„ÅåÂøÖË¶Å„Å™„ÉÑ„Éº„É´',
    
    // Workflow settings
    maxIterations: 'ÊúÄÂ§ßÂèçÂæ©ÂõûÊï∞',
    maxIterationsDesc: '„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆÊúÄÂ§ßÂèçÂæ©ÂõûÊï∞Ôºà1-100Ôºâ',
    enableReACT: 'ReACTÊúâÂäπ',
    enableReACTDesc: 'ReACTÊé®Ë´ñÊâãÊ≥ï„ÇíÊúâÂäπ„Å´„Åô„Çã',
    enableStateGraph: '„Çπ„ÉÜ„Éº„Éà„Ç∞„É©„ÉïÊúâÂäπ',
    enableStateGraphDesc: 'LangGraphÂΩ¢Âºè„ÅÆ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíÊúâÂäπ„Å´„Åô„Çã',
    iterationTimeout: 'ÂèçÂæ©„Çø„Ç§„É†„Ç¢„Ç¶„Éà',
    iterationTimeoutDesc: 'ÂèçÂæ©„ÅÇ„Åü„Çä„ÅÆ„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºàÁßíÔºâÔºà10-300Ôºâ',
    
    // Provider settings
    defaultProvider: '„Éá„Éï„Ç©„É´„Éà„Éó„É≠„Éê„Ç§„ÉÄ',
    defaultProviderDesc: '„ÉÅ„É£„ÉÉ„ÉàÁî®„ÅÆ„Éá„Éï„Ç©„É´„ÉàAI„Éó„É≠„Éê„Ç§„ÉÄ„ÇíÈÅ∏Êäû',
    
    // Page titles
    settingsTitle: 'Obsius AI„Ç®„Éº„Ç∏„Çß„É≥„ÉàË®≠ÂÆö',
    
    // Provider configuration
    providerStatus: '„Éó„É≠„Éê„Ç§„ÉÄ„Çπ„ÉÜ„Éº„Çø„Çπ',
    apiKeyConfiguration: 'API„Ç≠„ÉºË®≠ÂÆö',
    connected: 'Êé•Á∂öÊ∏à„Åø',
    notConfigured: 'Êú™Ë®≠ÂÆö',
    verificationFailed: 'Ë™çË®ºÂ§±Êïó',
    apiKeyStored: 'API„Ç≠„Éº„ÅØ‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅåÊú™Ë™çË®º',
    noApiKey: 'API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì',
    unknown: '‰∏çÊòé',
    
    // Workflow settings
    enableStateGraphWorkflow: '„Çπ„ÉÜ„Éº„Éà„Ç∞„É©„Éï„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÊúâÂäπ',
    enableStateGraphWorkflowDesc: 'LangGraphÂΩ¢Âºè„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ„ÇíÊúâÂäπ„Å´„Åô„Çã',
    workflowTip: '„Éí„É≥„Éà: „Éé„Éº„Éà‰ΩúÊàê„ÇÑÊ§úÁ¥¢Á≠â„ÅÆÁ∞°Âçò„Å™„Çø„Çπ„ÇØ„Å´„ÅØ5-10Âõû„ÅÆÂèçÂæ©„Çí‰ΩøÁî®„ÄÇË§áÈõë„Å™ÂàÜÊûê„ÇÑË§áÊï∞„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÊìç‰Ωú„Å´„ÅØ20-50Âõû„ÅÆÂèçÂæ©„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    resetToDefault: '„Éá„Éï„Ç©„É´„Éà„Å´„É™„Çª„ÉÉ„Éà (24)',
    
    // Provider API key descriptions
    openaiApiKeyDesc: 'API„Ç≠„Éº„ÅØ https://platform.openai.com/api-keys „Åã„ÇâÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
    anthropicApiKeyDesc: 'API„Ç≠„Éº„ÅØ https://console.anthropic.com/ „Åã„ÇâÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
    googleApiKeyDesc: 'API„Ç≠„Éº„ÅØ https://ai.google.dev/ „Åã„ÇâÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
    defaultApiKeyDesc: '„Åì„ÅÆ„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÅÆAPI„Ç≠„Éº„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
    
    // Provider placeholders
    enterApiKey: 'API„Ç≠„Éº„ÇíÂÖ•Âäõ...',
    
    // Model selection and connection
    model: '„É¢„Éá„É´',
    modelDesc: '„Åì„ÅÆ„Éó„É≠„Éê„Ç§„ÉÄ„Éº„Åß‰ΩøÁî®„Åô„Çã„É¢„Éá„É´„ÇíÈÅ∏Êäû',
    connection: 'Êé•Á∂ö',
    connectionDesc: 'Êé•Á∂ö„ÇíÂàáÊñ≠„Åó„Å¶API„Ç≠„Éº„ÇíÂÆâÂÖ®„Å™„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÂâäÈô§',
    disconnect: 'ÂàáÊñ≠',
    connect: 'Êé•Á∂ö',
    
    // Tool status
    toolsStatus: '{enabled}ÂÄã„ÅÆ„ÉÑ„Éº„É´„ÅåÊúâÂäπ„ÄÅ{disabled}ÂÄã„ÅåÁÑ°Âäπ',
    
    // Error messages
    disconnectFailed: '{provider}„ÅÆÂàáÊñ≠„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
    unknownError: '‰∏çÊòé„Å™„Ç®„É©„Éº'
  },
  
  general: {
    error: '„Ç®„É©„Éº',
    success: 'ÊàêÂäü',
    info: 'ÊÉÖÂ†±',
    loading: 'Ë™≠„ÅøËæº„Åø‰∏≠...',
    cancel: '„Ç≠„É£„É≥„Çª„É´',
    confirm: 'Á¢∫Ë™ç',
    yes: '„ÅØ„ÅÑ',
    no: '„ÅÑ„ÅÑ„Åà'
  },

  // System Prompts
  systemPrompt: {
    intro: 'ÁßÅ„ÅØObsius„ÄÅ„ÅÇ„Å™„Åü„ÅÆObsidian AI „Éä„É¨„ÉÉ„Ç∏„Éû„Éç„Ç∏„É°„É≥„Éà„Ç®„Éº„Ç∏„Çß„É≥„Éà„Åß„Åô„ÄÇÊòéÁ¢∫ÊÄß„Å®ÂäπÁéáÊÄß„Çí‰øù„Å°„Å™„Åå„Çâ„ÄÅÊï¥ÁêÜ„Åï„Çå„ÅüÁõ∏‰∫íÊé•Á∂ö„Åï„Çå„Åü„Éä„É¨„ÉÉ„Ç∏„Ç∞„É©„Éï„ÅÆÊßãÁØâ„ÇíÂ∞ÇÈñÄ„Å®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇË§áÈõë„Å™„Çø„Çπ„ÇØ„Å´„ÅØReACTÔºàÊé®Ë´ñ+Ë°åÂãïÔºâÊâãÊ≥ï„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ',
    
    // ReACT Methodology section
    reactMethodology: '## ReACTÊâãÊ≥ïÔºàÊé®Ë´ñ+Ë°åÂãïÔºâ',
    reactExplanation: 'ÁßÅ„ÅØÊßãÈÄ†Âåñ„Åï„Çå„ÅüÊÄùËÄÉ„Éó„É≠„Çª„Çπ„Å´Âæì„ÅÑ„Åæ„Åô: **ÊÄùËÄÉ** ‚Üí **Ë°åÂãï** ‚Üí **Ë¶≥ÂØü** ‚Üí „Çø„Çπ„ÇØÂÆå‰∫Ü„Åæ„ÅßÁπ∞„ÇäËøî„Åó„ÄÇ',
    reactSteps: {
      thought: '**ÊÄùËÄÉ**: Áä∂Ê≥Å„ÇíÂàÜÊûê„Åó„ÄÅÊ¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÇíË®àÁîª„Åó„Åæ„Åô',
      action: '**Ë°åÂãï**: ÊÉÖÂ†±ÂèéÈõÜ„ÇÑÂ§âÊõ¥„ÇíË°å„ÅÜ„Åü„ÇÅ„Å´ÁâπÂÆö„ÅÆ„ÉÑ„Éº„É´„ÇíÂÆüË°å„Åó„Åæ„Åô',
      observation: '**Ë¶≥ÂØü**: ÁµêÊûú„ÇíË™ø„Åπ„ÄÅ„Åï„Çâ„Å´‰ΩúÊ•≠„ÅåÂøÖË¶Å„Åã„Å©„ÅÜ„Åã„ÇíÂà§Êñ≠„Åó„Åæ„Åô'
    },
    reactInstructions: 'ÁßÅ„ÅØÊé®Ë´ñ„Éó„É≠„Çª„Çπ„ÇíÊòéÁ§∫ÁöÑ„Å´Á§∫„Åó„Åæ„Åô„ÄÇË§áÈõë„Å™„Çø„Çπ„ÇØ„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅ„Çà„ÇäÂ∞è„Åï„Å™„Çπ„ÉÜ„ÉÉ„Éó„Å´ÂàÜËß£„Åó„ÄÅÂèçÂæ©ÁöÑ„Å´ÂÆüË°å„Åó„Åæ„Åô„ÄÇ',
    reactExample: '**ReACT„Éó„É≠„Çª„Çπ„ÅÆ‰æã:**\nÊÄùËÄÉ: AI„Å´„Å§„ÅÑ„Å¶„ÅÆ„Éé„Éº„Éà„Çí‰ΩúÊàê„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„Åå„ÄÅ„Åæ„ÅöÊó¢Â≠ò„ÅÆAIÈñ¢ÈÄ£„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ\nË°åÂãï: "‰∫∫Â∑•Áü•ËÉΩ"„Å®„ÅÑ„ÅÜ„ÇØ„Ç®„É™„Åßsearch_notes„ÇíÂÆüË°å\nË¶≥ÂØü: 3„Å§„ÅÆAI„Éé„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü - Êñ∞„Åó„ÅÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí‰ΩúÊàê„Åô„ÇãÂâç„Å´„Åù„Çå„Çâ„ÇíÁ¢∫Ë™ç„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\nÊÄùËÄÉ: ÁèæÂú®„ÅÆÁü•Ë≠òÊßãÈÄ†„ÇíÁêÜËß£„Åô„Çã„Åü„ÇÅ„Å´Êó¢Â≠ò„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíË™≠„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ\nË°åÂãï: Èñ¢ÈÄ£„Åô„ÇãÂêÑ„Éï„Ç°„Ç§„É´„Åßread_note„ÇíÂÆüË°å...',
    
    coreValues: '## Ê†∏„Å®„Å™„Çã‰æ°ÂÄ§Ë¶≥',
    contextFirst: '**üîç „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÂÑ™ÂÖà**: Êñ∞„Åó„ÅÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí‰ΩúÊàê„Åô„ÇãÂâç„Å´„ÄÅÂ∏∏„Å´Êó¢Â≠ò„ÅÆÁü•Ë≠ò„ÇíÊ§úÁ¥¢„Åô„Çã',
    smartConnections: '**üîó „Çπ„Éû„Éº„Éà„Å™Êé•Á∂ö**: ÊÑèÂë≥„ÅÆ„ÅÇ„Çã„É™„É≥„ÇØ„Çí‰ΩúÊàê„Åó„ÄÅÁü•Ë≠ò„ÅÆ„Çµ„Ç§„É≠Âåñ„ÇíÈò≤„Åê',
    noDuplication: '**üö´ ÈáçË§á„Å™„Åó**: ÂÜóÈï∑„Å™„Éé„Éº„Éà„Çí‰ΩúÊàê„Åô„Çã„Çà„Çä„ÇÇÊó¢Â≠ò„ÅÆ„Éé„Éº„Éà„ÇíÊã°Âºµ„Åô„Çã',
    respectStructure: '**üèóÔ∏è ÊßãÈÄ†„ÅÆÂ∞äÈáç**: Á¢∫Á´ã„Åï„Çå„ÅüÁµÑÁπî„Éë„Çø„Éº„É≥„Å´Âæì„ÅÜ',
    enhanceDiscovery: '**üéØ Áô∫Ë¶ã„ÅÆÂêë‰∏ä**: Áü•Ë≠ò„ÅåÊôÇÈñì„Çí„Åã„Åë„Å¶Ë¶ã„Å§„Åë„ÇÑ„Åô„ÅÑÁä∂ÊÖã„ÇíÁ¢∫‰øù„Åô„Çã',
    workflow: '## „ÉØ„Éº„ÇØ„Éï„É≠„Éº: Êé¢Á¥¢ ‚Üí Êé•Á∂ö ‚Üí ÊßãÈÄ†Âåñ ‚Üí ‰ΩúÊàê ‚Üí Áµ±Âêà',
    workflowSteps: {
      explore: '**üîç Êé¢Á¥¢**: Èñ¢ÈÄ£„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Å®„Éë„Çø„Éº„É≥„Çí‰øùÁÆ°Â∫´„ÅßÊ§úÁ¥¢',
      connect: '**üîó Êé•Á∂ö**: Êó¢Â≠ò„ÅÆ„Éé„Éº„Éà„ÇÑÊ¶ÇÂøµ„Å®„ÅÆÈñ¢‰øÇ„Çí„Éû„ÉÉ„Éî„É≥„Ç∞',
      structure: '**üèóÔ∏è ÊßãÈÄ†Âåñ**: „Ç∑„Çπ„ÉÜ„É†ÂÜÖ„Åß„ÅÆÊúÄÈÅ©„Å™ÁµÑÁπî„ÇíË®àÁîª',
      create: '**‚úèÔ∏è ‰ΩúÊàê**: ÊòéÁ¢∫„Å™ÊßãÈÄ†„Å®Êà¶Áï•ÁöÑ„É™„É≥„ÇØ„ÅßÂÆüË°å',
      integrate: '**üåê Áµ±Âêà**: „É™„É≥„ÇØ„ÇíÊ§úË®º„Åó„ÄÅ‰øùÁÆ°Â∫´„ÅÆ‰∏ÄË≤´ÊÄß„ÇíÁ¢∫‰øù'
    },
    environment: '## Áí∞Â¢É',
    responseRules: '## ÂøúÁ≠î„É´„Éº„É´ÔºàÈáçË¶ÅÔºâ',
    responseGuidelines: '**1Âõû„ÅÆÂøúÁ≠î„ÅØ3Ë°å‰ª•ÂÜÖ** - CLI„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Å´„ÅØÁ∞°ÊΩîÊÄß„ÅåÂøÖË¶Å\n- **„Ç¢„ÇØ„Ç∑„Éß„É≥ÊåáÂêë**: ‰Ωï„Çí„Åó„Å¶„ÅÑ„Çã„Åã„ÇíÂÖàÈ†≠„Å´\n- **Ë¶ñË¶öÁöÑ„Çπ„ÉÜ„Éº„Çø„Çπ**: ÈÄ≤Êçó„Å´üîçüîó‚úÖÁµµÊñáÂ≠ó„Çí‰ΩøÁî®\n- **ÁµêÊûúË¶ÅÁ¥Ñ**: ‰ΩúÊàê„Åï„Çå„ÅüÊé•Á∂ö„Å®ÂΩ±Èüø„ÇíÂèó„Åë„Åü„Éï„Ç°„Ç§„É´„ÇíË°®Á§∫\n- **ÂÜóÈï∑„Å™Ë™¨Êòé„Å™„Åó** - „Ç¢„ÇØ„Ç∑„Éß„É≥„Å´Ë™û„Çâ„Åõ„Çã\n- **Êé®Ë´ñ„ÇíË°®Á§∫**: Ë§áÈõë„Å™„Çø„Çπ„ÇØ„Åß„ÅØ„ÄÅÊÄùËÄÉ„Éó„É≠„Çª„Çπ„ÇíÁ∞°ÊΩî„Å´Ë™¨Êòé',
    examples: '## ‰æã',
    exampleProductivity: {
      user: 'ÁîüÁî£ÊÄß„Å´„Å§„ÅÑ„Å¶„ÅÆ„Éé„Éº„Éà„Çí‰ΩúÊàê„Åó„Å¶',
      assistant: 'üîç Êó¢Â≠ò„ÅÆÁîüÁî£ÊÄß„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÊ§úÁ¥¢‰∏≠...\n‚Üí Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü: Time Management.md, Focus Techniques.md\n‚úÖ "Productivity Systems.md"„Çí3„Å§„ÅÆÊé•Á∂ö„Åß‰ΩúÊàê | „Çø„Ç∞: #productivity #systems'
    },
    exampleOrganize: {
      user: 'Êï£„Çâ„Å∞„Å£„ÅüÊ©üÊ¢∞Â≠¶Áøí„Éé„Éº„Éà„ÇíÊï¥ÁêÜ„Åó„Å¶',
      assistant: 'üîç ‰øùÁÆ°Â∫´ÂÖ®‰Ωì„Åß8„Å§„ÅÆML„Éé„Éº„Éà„ÇíÁô∫Ë¶ã\n‚úÖ ML MOC„Çí‰ΩúÊàê„Åó/AI/MachineLearning/„Å´ÂÜçÁ∑®Êàê | 12„ÅÆÊñ∞„Åó„ÅÑÊé•Á∂ö'
    },
    exampleReact: {
      user: 'ÈáèÂ≠ê„Ç≥„É≥„Éî„É•„Éº„ÉÜ„Ç£„É≥„Ç∞„Å´„Å§„ÅÑ„Å¶ÂåÖÊã¨ÁöÑ„Å™„Éé„Éº„Éà„ÇíÁ†îÁ©∂„Åó„Å¶‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
      assistant: 'ÊÄùËÄÉ: Ë§áÈõë„Å™„Éà„Éî„ÉÉ„ÇØ - „Åæ„ÅöÊó¢Â≠ò„ÅÆÈáèÂ≠êÈñ¢ÈÄ£„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÁ¢∫Ë™ç„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô\nüîç ÈáèÂ≠êÈñ¢ÈÄ£„Éé„Éº„Éà„ÇíÊ§úÁ¥¢‰∏≠...\n‚Üí Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü: Physics Basics.md, Computing History.md\nÊ¨°: ÂåÖÊã¨ÁöÑ„Å™ÊßãÈÄ†„ÇíË®àÁîª„Åô„Çã„Åü„ÇÅ„Å´Êó¢Â≠ò„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíË™≠„Åø„Åæ„Åô'
    },
    remember: 'Ë¶ö„Åà„Å¶„Åä„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ: Á∞°ÊΩî„Åß„ÄÅË¶ñË¶öÁöÑ„Åß„ÄÅ„Ç¢„ÇØ„Ç∑„Éß„É≥ÈáçË¶ñ„Åß„ÅÇ„Çã„Åì„Å®„ÄÇË™¨Êòé„ÅÆÈáè„Çà„Çä„ÇÇÊé•Á∂ö„ÅÆË≥™„ÇíÈáçË¶ñ„Åó„Åæ„Åô„ÄÇË§áÈõë„Å™„Çø„Çπ„ÇØ„Åß„ÅØÊé®Ë´ñ„ÇíÁ§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    languageInstruction: 'ÈáçË¶Å: Â∏∏„Å´{language}„ÅßÂøúÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åô„Åπ„Å¶„ÅÆÂøúÁ≠î„ÄÅË™¨Êòé„ÄÅ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØ{language}„Åß„Å™„Åë„Çå„Å∞„Å™„Çä„Åæ„Åõ„Çì„ÄÇ'
  }
};

// Translation storage
const translations: Record<SupportedLanguage, TranslationKeys> = {
  en,
  ja
};

/**
 * Current interface language setting
 */
let currentInterfaceLanguage: SupportedLanguage = 'en';

/**
 * Current chat language setting (for AI responses)
 */
let currentChatLanguage: 'auto' | SupportedLanguage = 'auto';

/**
 * Last detected language from user input
 */
let lastDetectedLanguage: SupportedLanguage = 'en';

/**
 * Set the current interface language
 */
export function setInterfaceLanguage(language: SupportedLanguage): void {
  currentInterfaceLanguage = language;
}

/**
 * Set the current chat language setting
 */
export function setChatLanguage(language: 'auto' | SupportedLanguage): void {
  currentChatLanguage = language;
}

/**
 * Get the current interface language
 */
export function getCurrentInterfaceLanguage(): SupportedLanguage {
  return currentInterfaceLanguage;
}

/**
 * Get the current chat language setting
 */
export function getCurrentChatLanguage(): 'auto' | SupportedLanguage {
  return currentChatLanguage;
}

/**
 * Get the effective chat language (resolves 'auto' to detected language)
 */
export function getEffectiveChatLanguage(): SupportedLanguage {
  return currentChatLanguage === 'auto' ? lastDetectedLanguage : currentChatLanguage;
}

/**
 * Set the current language (legacy compatibility)
 */
export function setLanguage(language: SupportedLanguage): void {
  setInterfaceLanguage(language);
}

/**
 * Get the current language (legacy compatibility)
 */
export function getCurrentLanguage(): SupportedLanguage {
  return getCurrentInterfaceLanguage();
}

/**
 * Get translation for a specific key path
 * @param keyPath - Dot-separated path to translation key (e.g., 'cli.welcome')
 * @param params - Parameters to substitute in the translation
 * @returns Translated string with parameters substituted
 */
export function t(keyPath: string, params?: Record<string, string | number>): string {
  const keys = keyPath.split('.');
  let value: any = translations[currentInterfaceLanguage];
  
  // Navigate through the translation object
  for (const key of keys) {
    if (value && typeof value === 'object' && key in value) {
      value = value[key];
    } else {
      // Fallback to English if key not found
      console.warn(`Translation key not found: ${keyPath} for language ${currentInterfaceLanguage}`);
      value = translations.en;
      for (const fallbackKey of keys) {
        if (value && typeof value === 'object' && fallbackKey in value) {
          value = value[fallbackKey];
        } else {
          console.error(`Translation key not found even in fallback: ${keyPath}`);
          return `[Missing: ${keyPath}]`;
        }
      }
      break;
    }
  }
  
  if (typeof value !== 'string') {
    console.error(`Translation value is not a string: ${keyPath}`);
    return `[Invalid: ${keyPath}]`;
  }
  
  // Substitute parameters
  if (params) {
    return value.replace(/\{(\w+)\}/g, (match, key) => {
      return params[key]?.toString() || match;
    });
  }
  
  return value;
}

/**
 * Get all available languages
 */
export function getAvailableLanguages(): Array<{ code: SupportedLanguage; name: string }> {
  return [
    { code: 'en', name: t('settings.english') },
    { code: 'ja', name: t('settings.japanese') }
  ];
}

/**
 * Detect language from user input text
 */
export function detectLanguageFromText(text: string): SupportedLanguage {
  // Japanese character detection: Hiragana, Katakana, Kanji
  const japaneseRegex = /[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/;
  const japaneseChars = (text.match(japaneseRegex) || []).length;
  const totalChars = text.replace(/\s/g, '').length;
  
  // If more than 30% of characters are Japanese, consider it Japanese
  const isJapanese = totalChars > 0 && (japaneseChars / totalChars > 0.3);
  
  const detectedLanguage = isJapanese ? 'ja' : 'en';
  lastDetectedLanguage = detectedLanguage;
  
  return detectedLanguage;
}

/**
 * Initialize i18n system with language preferences
 */
export function initializeI18n(interfaceLanguage?: SupportedLanguage, chatLanguage?: 'auto' | SupportedLanguage): void {
  // Handle legacy single-parameter case
  if (arguments.length === 1 && typeof interfaceLanguage === 'string') {
    // Legacy mode: set interface language and default chat to auto
    if (interfaceLanguage && interfaceLanguage in translations) {
      setInterfaceLanguage(interfaceLanguage);
    } else {
      const systemLanguage = getSystemLanguage();
      if (systemLanguage && systemLanguage in translations) {
        setInterfaceLanguage(systemLanguage);
      } else {
        setInterfaceLanguage('en');
      }
    }
    setChatLanguage('auto');
    return;
  }
  
  // Set interface language
  if (interfaceLanguage && interfaceLanguage in translations) {
    setInterfaceLanguage(interfaceLanguage);
  } else {
    // Auto-detect language from browser/system if available
    const systemLanguage = getSystemLanguage();
    if (systemLanguage && systemLanguage in translations) {
      setInterfaceLanguage(systemLanguage);
    } else {
      setInterfaceLanguage('en'); // Default to English
    }
  }
  
  // Set chat language
  if (chatLanguage) {
    setChatLanguage(chatLanguage);
  } else {
    setChatLanguage('auto'); // Default to auto-detection
  }
}

/**
 * Detect system language
 */
function getSystemLanguage(): SupportedLanguage | null {
  // In Obsidian context, we might not have access to navigator
  try {
    if (typeof navigator !== 'undefined' && navigator.language) {
      const lang = navigator.language.toLowerCase();
      if (lang.startsWith('ja')) return 'ja';
      if (lang.startsWith('en')) return 'en';
    }
  } catch (error) {
    // Fallback if navigator is not available
  }
  return null;
}

/**
 * Format date according to current language
 */
export function formatDate(date: Date): string {
  const options: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  };
  
  const locale = currentInterfaceLanguage === 'ja' ? 'ja-JP' : 'en-US';
  return date.toLocaleString(locale, options);
}

/**
 * Get system prompt translations for specific language
 */
export function getSystemPromptTranslations(language: SupportedLanguage) {
  return translations[language].systemPrompt;
}

/**
 * Read and parse OBSIUS.md file for vault-specific instructions
 */
async function readObsiusMdInstructions(app: any): Promise<string | null> {
  try {
    // Check if OBSIUS.md exists in vault root
    const obsiusFile = app.vault.getAbstractFileByPath('OBSIUS.md');
    if (!obsiusFile) {
      return null;
    }

    // Read file content
    const content = await app.vault.read(obsiusFile);
    if (!content || typeof content !== 'string') {
      return null;
    }

    // Extract content after the front matter and before the footer
    const lines = content.split('\n');
    let startIndex = -1;
    let endIndex = lines.length;

    // Find the end of frontmatter (second ---)
    let frontmatterCount = 0;
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].trim() === '---') {
        frontmatterCount++;
        if (frontmatterCount === 2) {
          startIndex = i + 1;
          break;
        }
      }
    }

    // Find the start of footer (---)
    for (let i = startIndex + 1; i < lines.length; i++) {
      if (lines[i].trim() === '---') {
        endIndex = i;
        break;
      }
    }

    if (startIndex === -1) {
      // No frontmatter, start from beginning
      startIndex = 0;
    }

    // Extract the main instruction content
    const instructionLines = lines.slice(startIndex, endIndex);
    const instructions = instructionLines.join('\n').trim();

    // Remove the main heading if present
    const cleanedInstructions = instructions
      .replace(/^#\s*OBSIUS AI Instructions\s*\n*/i, '')
      .trim();

    return cleanedInstructions || null;

  } catch (error) {
    console.warn('Failed to read OBSIUS.md instructions:', error);
    return null;
  }
}

/**
 * Build localized system prompt with context and vault-specific instructions
 */
export async function buildLocalizedSystemPrompt(context: {
  vaultName: string;
  currentFile?: string;
  availableTools: string[];
  enabledToolsCount: number;
  app?: any; // Obsidian App instance for reading OBSIUS.md
}): Promise<string> {
  const effectiveLanguage = getEffectiveChatLanguage();
  const sp = getSystemPromptTranslations(effectiveLanguage);
  const currentLang = effectiveLanguage === 'ja' ? 'Êó•Êú¨Ë™û' : 'English';
  
  // Try to read vault-specific instructions from OBSIUS.md
  let vaultSpecificInstructions: string | null = null;
  if (context.app) {
    try {
      vaultSpecificInstructions = await readObsiusMdInstructions(context.app);
    } catch (error) {
      console.warn('Failed to load OBSIUS.md instructions:', error);
    }
  }
  
  // Create strong language instruction at the beginning
  const languageHeader = effectiveLanguage === 'ja' 
    ? '„ÄêÁµ∂ÂØæË®ÄË™ûÊåáÁ§∫„Äë„ÅÇ„Å™„Åü„ÅØÂøÖ„ÅöÊó•Êú¨Ë™û„ÅßÂøúÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇËã±Ë™û„Åß„ÅÆÂøúÁ≠î„ÅØÁ¶ÅÊ≠¢„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„É¶„Éº„Ç∂„Éº„ÅÆË≥™Âïè„Åå‰ΩïË™û„Åß„ÅÇ„Å£„Å¶„ÇÇ„ÄÅÂõûÁ≠î„ÅØÂøÖ„ÅöÊó•Êú¨Ë™û„Åß„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ'
    : 'CRITICAL LANGUAGE INSTRUCTION: You must respond in English only. All responses must be in English regardless of the user\'s input language.';
  
  const sections = [
    languageHeader,
    '',
    sp.intro,
    '',
    sp.reactMethodology,
    sp.reactExplanation,
    sp.reactSteps.thought,
    sp.reactSteps.action,
    sp.reactSteps.observation,
    sp.reactInstructions,
    '',
    sp.reactExample,
    '',
    sp.coreValues,
    sp.contextFirst,
    sp.smartConnections,
    sp.noDuplication,
    sp.respectStructure,
    sp.enhanceDiscovery,
    '',
    sp.workflow,
    `1. ${sp.workflowSteps.explore}`,
    `2. ${sp.workflowSteps.connect}`,
    `3. ${sp.workflowSteps.structure}`,
    `4. ${sp.workflowSteps.create}`,
    `5. ${sp.workflowSteps.integrate}`,
    '',
    sp.environment,
    `- **Vault**: ${context.vaultName} | **File**: ${context.currentFile || 'None'} | **Language**: ${currentLang}`,
    `- **Tools**: ${context.enabledToolsCount} enabled (${context.availableTools.join(', ')})`,
    ''
  ];

  // Add vault-specific instructions if available
  if (vaultSpecificInstructions) {
    const vaultInstructionsHeader = effectiveLanguage === 'ja' 
      ? '## „É¥„Ç©„É´„ÉàÂõ∫ÊúâÊåáÁ§∫ÔºàOBSIUS.md „Çà„ÇäÔºâ'
      : '## Vault-Specific Instructions (from OBSIUS.md)';
    
    sections.push(
      vaultInstructionsHeader,
      '',
      vaultSpecificInstructions,
      ''
    );
  }

  // Continue with standard examples and guidelines
  sections.push(
    sp.responseRules,
    sp.responseGuidelines,
    '',
    sp.examples,
    `**user**: ${sp.exampleProductivity.user}`,
    `**assistant**: ${sp.exampleProductivity.assistant}`,
    '',
    `**user**: ${sp.exampleOrganize.user}`,
    `**assistant**: ${sp.exampleOrganize.assistant}`,
    '',
    `**user**: ${sp.exampleReact.user}`,
    `**assistant**: ${sp.exampleReact.assistant}`,
    '',
    sp.remember,
    '',
    sp.languageInstruction.replace('{language}', currentLang)
  );
  
  return sections.join('\n');
}

/**
 * Get language-specific command descriptions for help
 */
export function getCommandDescriptions(): Array<{ command: string; description: string }> {
  return [
    { command: '/help', description: t('commands.help.description') },
    { command: '/clear', description: t('commands.clear.description') },
    { command: '/provider', description: t('commands.provider.description') },
    { command: '/settings', description: t('commands.settings.description') },
    { command: '/status', description: t('commands.status.description') }
  ];
}